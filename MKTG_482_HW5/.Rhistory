paste("Uplift profit is maximized at", percent(upliftTarget$cum_per, 0.1), "ntile")
num_test_cust <- nrow(expdata_stacked.test)
upliftRespRate_Test <- upliftTarget$incremental_Y1 / upliftTarget$T_n
propRespRate_Test <- propensityTarget$incremental_Y1 / propensityTarget$T_n
uplift_profit_test <- profit_func(upliftTarget$cum_per * num_test_cust, upliftRespRate_Test, revenue_per, cost_per)
prop_profit_test   <- profit_func(propensityTarget$cum_per * num_test_cust, propRespRate_Test, revenue_per, cost_per)
uplift_profit_test$model = "Uplift"
prop_profit_test$model = "Propensity"
uplift_profit_test %>% rbind(prop_profit_test) %>% select(model, everything())
"
1. The uplift model allows you filter out lesser performing targets, targeting fewer people resulting in lower cost
2. The uplift model may 'rebucket' previously lower-performing targets, allowing you to target more people
"
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
# install.packages('splitstackshape')
# install.packages('tools4uplift')
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(splitstackshape)
library(ranger)
# library(tools4uplift)
library(mktg482)
library(scales)
# use load("filename.Rdata") for .Rdata files
load("/Users/dain/Programs/R_Projects/MKTG_482_HW5/creative_gaming.Rdata")
cg_ad_random <- cg_ad_treatment[sample_random_30000,]
expdata_stacked <-
rbind(cg_organic_control %>% mutate(ad = 0), cg_ad_random %>% mutate(ad = 1))
set.seed(1234)
split.index <- stratified(expdata_stacked, c("ad", "converted"), 0.7, bothSets=TRUE)
expdata_stacked.train <- split.index$SAMP1
expdata_stacked.test <- split.index$SAMP2
# expdata_stacked.train %>% tabyl(ad, converted) %>% adorn_percentages("all")
# expdata_stacked.test %>% tabyl(ad, converted) %>% adorn_percentages("all")
rf_fm <- formula(converted ~ . - ad, probability=TRUE, mtry=3, min.node.size=1)
rf_treatment <- ranger(rf_fm, data=expdata_stacked.train %>% filter(ad==1))
rf_control <- ranger(rf_fm, data=expdata_stacked.train %>% filter(ad==0))
expdata_stacked.test <- expdata_stacked.test %>%
mutate(
pred_treat = predict(rf_treatment, data=expdata_stacked.test, type="response")[[1]],
pred_control = predict(rf_control, data=expdata_stacked.test, type="response")[[1]],
uplift_score = pred_treat - pred_control
)
# expdata_stacked.test %>%
#   arrange(-uplift_score) %>%
#   select(converted, ad, pred_treat, pred_control, uplift_score) %>% head()
PerfTable_uplift <- QiniTable(
expdata_stacked.test,
treat = "ad",
outcome = "converted",
prediction = "uplift_score",
nb.group = 20
)
PerfTable_uplift
QiniCurve(PerfTable_uplift)
QiniBarPlot(PerfTable_uplift)
"
Interpretation: Target 90% of creative gaming players with ads to maximize uplift
"
revenue_per <- 14.99
cost_per <- 1.50
# TBD: uplift calcs (compare against output from PerfTable_uplift)
# 130.4737 / 387   # 0.33714 [OK]
# 224.0681 / 802   # 0.27938 [??]
# 308.6682 / 1223  # 0.25238 [??]
# PerfTable_uplift
profit_func <- function(nrows, resp_rate, revenue_per, cost_per){
num_purch   <- nrows  * resp_rate
tot_revenue <- num_purch * revenue_per
tot_cost    <- nrows * cost_per
data.frame("NumTargets"=nrows, "NumPurchasers"=num_purch, "ResponseRate"= resp_rate, "Revenue"=tot_revenue, "Cost"=tot_cost, "Profit"=tot_revenue - tot_cost)
}
upliftquarterPerc <- PerfTable_uplift %>% slice(5,)
upliftRespRate <- upliftquarterPerc$incremental_Y1 / upliftquarterPerc$T_n
blendedRateWithAd <- mean(cg_ad_treatment$converted)
uplift_profit <- profit_func(30000, upliftRespRate, revenue_per, cost_per)
no_model_profit <- profit_func(30000, blendedRateWithAd, revenue_per, cost_per)
paste("Incremental Uplift over Nothing Profit: ", dollar(uplift_profit$Profit - no_model_profit$Profit))
PerfTable_propensity <- QiniTable(
expdata_stacked.test,
treat = "ad",
outcome = "converted",
prediction = "pred_treat",
nb.group=20
)
QiniCurve(PerfTable_propensity)
QiniBarPlot(PerfTable_propensity)
QiniBarPlot(PerfTable_uplift, PerfTable_propensity,
modelnames = c("Uplift Model", "Propensity Model"))
# cor(expdata_stacked.test$pred_treat, expdata_stacked.test$uplift_score)
prop_quarterPerc <- PerfTable_propensity %>% slice(5,)
prop_RespRate <- prop_quarterPerc$incremental_Y1 / prop_quarterPerc$T_n
prop_profit <- profit_func(30000, prop_RespRate, revenue_per, cost_per)
paste("Incremental Uplift over Propensity Profit: ", dollar(uplift_profit$Profit - prop_profit$Profit))
PerfTable_propensity %>%
mutate(inc_profit=revenue_per*incremental_Y1 - cost_per*T_n)
propensityTarget <- PerfTable_propensity %>%
mutate(inc_profit=revenue_per*incremental_Y1 - cost_per*T_n) %>%
slice(which.max(inc_profit))
paste("Propensity profit is maximized at", percent(propensityTarget$cum_per, 0.1), "ntile")
PerfTable_uplift %>%
mutate(inc_profit=revenue_per*incremental_Y1 - cost_per*T_n)
upliftTarget <- PerfTable_uplift %>%
mutate(inc_profit=revenue_per*incremental_Y1 - cost_per*T_n) %>%
slice(which.max(inc_profit))
paste("Uplift profit is maximized at", percent(upliftTarget$cum_per, 0.1), "ntile")
num_test_cust <- nrow(expdata_stacked.test)
upliftRespRate_Test <- upliftTarget$incremental_Y1 / upliftTarget$T_n
propRespRate_Test <- propensityTarget$incremental_Y1 / propensityTarget$T_n
uplift_profit_test <- profit_func(upliftTarget$cum_per * num_test_cust, upliftRespRate_Test, revenue_per, cost_per)
prop_profit_test   <- profit_func(propensityTarget$cum_per * num_test_cust, propRespRate_Test, revenue_per, cost_per)
uplift_profit_test$model = "Uplift"
prop_profit_test$model = "Propensity"
uplift_profit_test %>% rbind(prop_profit_test) %>% select(model, everything())
"
1. The uplift model allows you filter out lesser performing targets, targeting fewer people resulting in lower cost
2. The uplift model may 'rebucket' previously lower-performing targets, allowing you to target more people
"
rm(list=ls())
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
# install.packages('splitstackshape')
# install.packages('tools4uplift')
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(splitstackshape)
library(ranger)
# library(tools4uplift)
library(mktg482)
library(scales)
# use load("filename.Rdata") for .Rdata files
load("/Users/dain/Programs/R_Projects/MKTG_482_HW5/creative_gaming.Rdata")
cg_ad_random <- cg_ad_treatment[sample_random_30000,]
expdata_stacked <-
rbind(cg_organic_control %>% mutate(ad = 0), cg_ad_random %>% mutate(ad = 1))
set.seed(1234)
split.index <- stratified(expdata_stacked, c("ad", "converted"), 0.7, bothSets=TRUE)
expdata_stacked.train <- split.index$SAMP1
expdata_stacked.test <- split.index$SAMP2
# expdata_stacked.train %>% tabyl(ad, converted) %>% adorn_percentages("all")
# expdata_stacked.test %>% tabyl(ad, converted) %>% adorn_percentages("all")
rf_fm <- formula(converted ~ . - ad, probability=TRUE, mtry=3, min.node.size=1)
rf_treatment <- ranger(rf_fm, data=expdata_stacked.train %>% filter(ad==1))
rf_control <- ranger(rf_fm, data=expdata_stacked.train %>% filter(ad==0))
expdata_stacked.test <- expdata_stacked.test %>%
mutate(
pred_treat = predict(rf_treatment, data=expdata_stacked.test, type="response")[[1]],
pred_control = predict(rf_control, data=expdata_stacked.test, type="response")[[1]],
uplift_score = pred_treat - pred_control
)
# expdata_stacked.test %>%
#   arrange(-uplift_score) %>%
#   select(converted, ad, pred_treat, pred_control, uplift_score) %>% head()
PerfTable_uplift <- QiniTable(
expdata_stacked.test,
treat = "ad",
outcome = "converted",
prediction = "uplift_score",
nb.group = 20
)
PerfTable_uplift
QiniCurve(PerfTable_uplift)
QiniBarPlot(PerfTable_uplift)
"
Interpretation: Target 90% of creative gaming players with ads to maximize uplift
"
revenue_per <- 14.99
cost_per <- 1.50
# TBD: uplift calcs (compare against output from PerfTable_uplift)
# 130.4737 / 387   # 0.33714 [OK]
# 224.0681 / 802   # 0.27938 [??]
# 308.6682 / 1223  # 0.25238 [??]
# PerfTable_uplift
profit_func <- function(nrows, resp_rate, revenue_per, cost_per){
num_purch   <- nrows  * resp_rate
tot_revenue <- num_purch * revenue_per
tot_cost    <- nrows * cost_per
data.frame("NumTargets"=nrows, "NumPurchasers"=num_purch, "ResponseRate"= resp_rate, "Revenue"=tot_revenue, "Cost"=tot_cost, "Profit"=tot_revenue - tot_cost)
}
upliftquarterPerc <- PerfTable_uplift %>% slice(5,)
upliftRespRate <- upliftquarterPerc$incremental_Y1 / upliftquarterPerc$T_n
blendedRateWithAd <- mean(cg_ad_treatment$converted)
uplift_profit <- profit_func(30000, upliftRespRate, revenue_per, cost_per)
no_model_profit <- profit_func(30000, blendedRateWithAd, revenue_per, cost_per)
paste("Incremental Uplift over Nothing Profit: ", dollar(uplift_profit$Profit - no_model_profit$Profit))
PerfTable_propensity <- QiniTable(
expdata_stacked.test,
treat = "ad",
outcome = "converted",
prediction = "pred_treat",
nb.group=20
)
QiniCurve(PerfTable_propensity)
QiniBarPlot(PerfTable_propensity)
QiniBarPlot(PerfTable_uplift, PerfTable_propensity,
modelnames = c("Uplift Model", "Propensity Model"))
# cor(expdata_stacked.test$pred_treat, expdata_stacked.test$uplift_score)
prop_quarterPerc <- PerfTable_propensity %>% slice(5,)
prop_RespRate <- prop_quarterPerc$incremental_Y1 / prop_quarterPerc$T_n
prop_profit <- profit_func(30000, prop_RespRate, revenue_per, cost_per)
paste("Incremental Uplift over Propensity Profit: ", dollar(uplift_profit$Profit - prop_profit$Profit))
PerfTable_propensity %>%
mutate(inc_profit=revenue_per*incremental_Y1 - cost_per*T_n)
propensityTarget <- PerfTable_propensity %>%
mutate(inc_profit=revenue_per*incremental_Y1 - cost_per*T_n) %>%
slice(which.max(inc_profit))
paste("Propensity profit is maximized at", percent(propensityTarget$cum_per, 0.1), "ntile")
PerfTable_uplift %>%
mutate(inc_profit=revenue_per*incremental_Y1 - cost_per*T_n)
upliftTarget <- PerfTable_uplift %>%
mutate(inc_profit=revenue_per*incremental_Y1 - cost_per*T_n) %>%
slice(which.max(inc_profit))
paste("Uplift profit is maximized at", percent(upliftTarget$cum_per, 0.1), "ntile")
num_test_cust <- nrow(expdata_stacked.test)
upliftRespRate_Test <- upliftTarget$incremental_Y1 / upliftTarget$T_n
propRespRate_Test <- propensityTarget$incremental_Y1 / propensityTarget$T_n
uplift_profit_test <- profit_func(upliftTarget$cum_per * num_test_cust, upliftRespRate_Test, revenue_per, cost_per)
prop_profit_test   <- profit_func(propensityTarget$cum_per * num_test_cust, propRespRate_Test, revenue_per, cost_per)
uplift_profit_test$model = "Uplift"
prop_profit_test$model = "Propensity"
uplift_profit_test %>% rbind(prop_profit_test) %>% select(model, everything())
"
1. The uplift model allows you filter out lesser performing targets, targeting fewer people resulting in lower cost
2. The uplift model may 'rebucket' previously lower-performing targets, allowing you to target more people
"
# use load("filename.Rdata") for .Rdata files
load("/Users/dain/Programs/R_Projects/MKTG_482_HW5/creative_gaming.Rdata")
cg_organic <- cg_organic %>%
mutate(converted=factor(converted))
cg_organic_control <- cg_organic_control %>%
mutate(converted=factor(converted))
cg_ad_treatment <- cg_ad_treatment %>%
mutate(converted=factor(converted))
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
# install.packages('splitstackshape')
# install.packages('tools4uplift')
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(splitstackshape)
library(ranger)
# library(tools4uplift)
library(mktg482)
library(scales)
# use load("filename.Rdata") for .Rdata files
load("/Users/dain/Programs/R_Projects/MKTG_482_HW5/creative_gaming.Rdata")
cg_organic <- cg_organic %>%
mutate(converted=factor(converted))
cg_organic_control <- cg_organic_control %>%
mutate(converted=factor(converted))
cg_ad_treatment <- cg_ad_treatment %>%
mutate(converted=factor(converted))
cg_ad_random <- cg_ad_treatment[sample_random_30000,]
expdata_stacked <-
rbind(cg_organic_control %>% mutate(ad = 0), cg_ad_random %>% mutate(ad = 1))
set.seed(1234)
split.index <- stratified(expdata_stacked, c("ad", "converted"), 0.7, bothSets=TRUE)
expdata_stacked.train <- split.index$SAMP1
expdata_stacked.test <- split.index$SAMP2
# expdata_stacked.train %>% tabyl(ad, converted) %>% adorn_percentages("all")
# expdata_stacked.test %>% tabyl(ad, converted) %>% adorn_percentages("all")
rf_fm <- formula(converted ~ . - ad, probability=TRUE, mtry=3, min.node.size=1)
rf_treatment <- ranger(rf_fm, data=expdata_stacked.train %>% filter(ad==1))
rf_control <- ranger(rf_fm, data=expdata_stacked.train %>% filter(ad==0))
expdata_stacked.test <- expdata_stacked.test %>%
mutate(
pred_treat = predict(rf_treatment, data=expdata_stacked.test, type="response")[[1]],
pred_control = predict(rf_control, data=expdata_stacked.test, type="response")[[1]],
uplift_score = pred_treat - pred_control
)
# expdata_stacked.test %>%
#   arrange(-uplift_score) %>%
#   select(converted, ad, pred_treat, pred_control, uplift_score) %>% head()
PerfTable_uplift <- QiniTable(
expdata_stacked.test,
treat = "ad",
outcome = "converted",
prediction = "uplift_score",
nb.group = 20
)
expdata_stacked %>% tabyl(ad,converted) %>% adorn_percentages("all")
cg_ad_random <- cg_ad_treatment[sample_random_30000,]
expdata_stacked <-
rbind(cg_organic_control %>% mutate(ad = 0), cg_ad_random %>% mutate(ad = 1))
set.seed(1234)
split.index <- stratified(expdata_stacked, c("ad", "converted"), 0.7, bothSets=TRUE)
expdata_stacked.train <- split.index$SAMP1
expdata_stacked.test <- split.index$SAMP2
expdata_stacked %>% tabyl(ad,converted) %>% adorn_percentages("all")
expdata_stacked.train %>% tabyl(ad, converted) %>% adorn_percentages("all")
expdata_stacked.test %>% tabyl(ad, converted) %>% adorn_percentages("all")
rf_fm <- formula(converted ~ . - ad, probability=TRUE, mtry=3, min.node.size=1)
rf_treatment <- ranger(rf_fm, data=expdata_stacked.train %>% filter(ad==1))
rf_control <- ranger(rf_fm, data=expdata_stacked.train %>% filter(ad==0))
expdata_stacked.test <- expdata_stacked.test %>%
mutate(
pred_treat = predict(rf_treatment, data=expdata_stacked.test, type="response")[[1]][,2],
pred_control = predict(rf_control, data=expdata_stacked.test, type="response")[[1]][,2],
uplift_score = pred_treat - pred_control
)
rf_treatment <- ranger(converted ~ . - ad,
data=expdata_stacked.train %>% filter(ad==1),
probability=TRUE, mtry=3, min.node.size=1)
rf_control <- ranger(converted ~ . - ad,
data=expdata_stacked.train %>% filter(ad==0),
probability=TRUE, mtry=3, min.node.size=1)
expdata_stacked.test <- expdata_stacked.test %>%
mutate(
pred_treat = predict(rf_treatment, data=expdata_stacked.test, type="response")[[1]][,2],
pred_control = predict(rf_control, data=expdata_stacked.test, type="response")[[1]][,2],
uplift_score = pred_treat - pred_control
)
# expdata_stacked.test %>%
#   arrange(-uplift_score) %>%
#   select(converted, ad, pred_treat, pred_control, uplift_score) %>% head()
PerfTable_uplift <- QiniTable(
expdata_stacked.test,
treat = "ad",
outcome = "converted",
prediction = "uplift_score",
nb.group = 20
)
PerfTable_uplift
QiniCurve(PerfTable_uplift)
QiniBarPlot(PerfTable_uplift)
"
Interpretation: Target 90% of creative gaming players with ads to maximize uplift
"
slice
revenue_per <- 14.99
cost_per <- 1.50
# TBD: uplift calcs (compare against output from PerfTable_uplift)
# 130.4737 / 387   # 0.33714 [OK]
# 224.0681 / 802   # 0.27938 [??]
# 308.6682 / 1223  # 0.25238 [??]
# PerfTable_uplift
profit_func <- function(nrows, resp_rate, revenue_per, cost_per){
num_purch   <- nrows  * resp_rate
tot_revenue <- num_purch * revenue_per
tot_cost    <- nrows * cost_per
data.frame("NumTargets"=nrows, "NumPurchasers"=num_purch, "ResponseRate"= resp_rate, "Revenue"=tot_revenue, "Cost"=tot_cost, "Profit"=tot_revenue - tot_cost)
}
upliftquarterPerc <- PerfTable_uplift %>% slice(5,)
upliftRespRate <- upliftquarterPerc$incremental_Y1 / upliftquarterPerc$T_n
blendedRateWithAd <- mean(cg_ad_treatment$converted)
uplift_profit <- profit_func(30000, upliftRespRate, revenue_per, cost_per)
no_model_profit <- profit_func(30000, blendedRateWithAd, revenue_per, cost_per)
paste("Incremental Uplift over Nothing Profit: ", dollar(uplift_profit$Profit - no_model_profit$Profit))
upliftquarterPerc
upliftquarterPerc %>% head(5)
upliftquarterPerc %>% slice(5,)
upliftquarterPerc %>% slice(5,)
upliftquarterPerc %>% slice(5,)
upliftquarterPerc %>% head(5)
upliftquarterPerc
upliftquarterPerc %>% head(5)
upliftRespRate <- upliftquarterPerc$incremental_Y1 / upliftquarterPerc$T_n
paste("Incremental Uplift over Nothing Profit: ", dollar(uplift_profit$Profit - no_model_profit$Profit))
revenue_per <- 14.99
cost_per <- 1.50
# TBD: uplift calcs (compare against output from PerfTable_uplift)
# 130.4737 / 387   # 0.33714 [OK]
# 224.0681 / 802   # 0.27938 [??]
# 308.6682 / 1223  # 0.25238 [??]
# PerfTable_uplift
profit_func <- function(nrows, resp_rate, revenue_per, cost_per){
num_purch   <- nrows  * resp_rate
tot_revenue <- num_purch * revenue_per
tot_cost    <- nrows * cost_per
data.frame("NumTargets"=nrows, "NumPurchasers"=num_purch, "ResponseRate"= resp_rate, "Revenue"=tot_revenue, "Cost"=tot_cost, "Profit"=tot_revenue - tot_cost)
}
upliftquarterPerc <- PerfTable_uplift %>% slice(5,)
upliftRespRate <- upliftquarterPerc$incremental_Y1 / upliftquarterPerc$T_n
blendedRateWithAd <- mean(cg_ad_treatment$converted)
uplift_profit <- profit_func(30000, upliftRespRate, revenue_per, cost_per)
no_model_profit <- profit_func(30000, blendedRateWithAd, revenue_per, cost_per)
paste("Incremental Uplift over Nothing Profit: ", dollar(uplift_profit$Profit - no_model_profit$Profit))
uplift_profit$Profit
no_model_profit$Profit
no_model_profit <- profit_func(30000, blendedRateWithAd, revenue_per, cost_per)
no_model_profit$Profit
no_model_profit
blendedRateWithAd
blendedRateWithAd <- mean(cg_ad_treatment$converted)
blendedRateWithAd
mean(cg_ad_treatment$converted)
cg_ad_treatment
mean(cg_ad_treatment$converted==1)
revenue_per <- 14.99
cost_per <- 1.50
# TBD: uplift calcs (compare against output from PerfTable_uplift)
# 130.4737 / 387   # 0.33714 [OK]
# 224.0681 / 802   # 0.27938 [??]
# 308.6682 / 1223  # 0.25238 [??]
# PerfTable_uplift
profit_func <- function(nrows, resp_rate, revenue_per, cost_per){
num_purch   <- nrows  * resp_rate
tot_revenue <- num_purch * revenue_per
tot_cost    <- nrows * cost_per
data.frame("NumTargets"=nrows, "NumPurchasers"=num_purch, "ResponseRate"= resp_rate, "Revenue"=tot_revenue, "Cost"=tot_cost, "Profit"=tot_revenue - tot_cost)
}
upliftquarterPerc <- PerfTable_uplift %>% slice(5,)
upliftRespRate <- upliftquarterPerc$incremental_Y1 / upliftquarterPerc$T_n
blendedRateWithAd <- mean(cg_ad_treatment$converted==1)
uplift_profit <- profit_func(30000, upliftRespRate, revenue_per, cost_per)
no_model_profit <- profit_func(30000, blendedRateWithAd, revenue_per, cost_per)
uplift_profit$Profit
no_model_profit
paste("Incremental Uplift over Nothing Profit: ", dollar(uplift_profit$Profit - no_model_profit$Profit))
paste("Incremental Uplift over Nothing Profit: ", dollar(uplift_profit$Profit - no_model_profit$Profit))
(PerfTable_top5_up$incremental_Y1
upliftquarterPerc$incremental_Y1
upliftquarterPerc$incremental_Y1
upliftquarterPerc$T_n
upliftquarterPerc$incremental_Y1
sum((upliftquarterPerc %>% head(5))$incremental_Y1)
sum((upliftquarterPerc %>% head(5))$incremental_Y1)
upliftquarterPerc$incremental_Y1
revenue_per <- 14.99
cost_per <- 1.50
# TBD: uplift calcs (compare against output from PerfTable_uplift)
# 130.4737 / 387   # 0.33714 [OK]
# 224.0681 / 802   # 0.27938 [??]
# 308.6682 / 1223  # 0.25238 [??]
# PerfTable_uplift
profit_func <- function(nrows, resp_rate, revenue_per, cost_per){
num_purch   <- nrows  * resp_rate
tot_revenue <- num_purch * revenue_per
tot_cost    <- nrows * cost_per
data.frame("NumTargets"=nrows, "NumPurchasers"=num_purch, "ResponseRate"= resp_rate, "Revenue"=tot_revenue, "Cost"=tot_cost, "Profit"=tot_revenue - tot_cost)
}
upliftquarterPerc <- PerfTable_uplift %>% slice(5,)
upliftRespRate <- upliftquarterPerc$incremental_Y1 / upliftquarterPerc$T_n
blendedRateWithAd <- mean(cg_ad_treatment$converted==1)
uplift_profit <- profit_func(30000, upliftRespRate, revenue_per, cost_per)
no_model_profit <- profit_func(30000, blendedRateWithAd, revenue_per, cost_per)
paste("Incremental Uplift over Nothing Profit: ", dollar(uplift_profit$Profit - no_model_profit$Profit))
PerfTable_top5_up <- PerfTable_uplift %>%
head(5)
PerfTable_top5_up
sum(PerfTable_top5_up$incremental_Y1)
PerfTable_top5_up
revenue_per <- 14.99
cost_per <- 1.50
# TBD: uplift calcs (compare against output from PerfTable_uplift)
# 130.4737 / 387   # 0.33714 [OK]
# 224.0681 / 802   # 0.27938 [??]
# 308.6682 / 1223  # 0.25238 [??]
# PerfTable_uplift
profit_func <- function(nrows, resp_rate, revenue_per, cost_per){
num_purch   <- nrows  * resp_rate
tot_revenue <- num_purch * revenue_per
tot_cost    <- nrows * cost_per
data.frame("NumTargets"=nrows, "NumPurchasers"=num_purch, "ResponseRate"= resp_rate, "Revenue"=tot_revenue, "Cost"=tot_cost, "Profit"=tot_revenue - tot_cost)
}
upliftquarterPerc <- PerfTable_uplift %>% slice(5,)
upliftRespRate <- upliftquarterPerc$incremental_Y1 / upliftquarterPerc$T_n
blendedRateWithAd <- mean(cg_ad_treatment$converted==1)
uplift_profit <- profit_func(30000, upliftRespRate, revenue_per, cost_per)
no_model_profit <- profit_func(30000, blendedRateWithAd, revenue_per, cost_per)
paste("Incremental Uplift over Nothing Profit: ", dollar(uplift_profit$Profit - no_model_profit$Profit))
PerfTable_propensity <- QiniTable(
expdata_stacked.test,
treat = "ad",
outcome = "converted",
prediction = "pred_treat",
nb.group=20
)
QiniCurve(PerfTable_propensity)
QiniBarPlot(PerfTable_propensity)
QiniBarPlot(PerfTable_uplift, PerfTable_propensity,
modelnames = c("Uplift Model", "Propensity Model"))
# cor(expdata_stacked.test$pred_treat, expdata_stacked.test$uplift_score)
PerfTable_propensity <- QiniTable(
expdata_stacked.test,
treat = "ad",
outcome = "converted",
prediction = "pred_treat",
nb.group=20
)
QiniCurve(PerfTable_uplift, PerfTable_propensity)
QiniBarPlot(PerfTable_uplift, PerfTable_propensity,
modelnames = c("Uplift Model", "Propensity Model"))
# cor(expdata_stacked.test$pred_treat, expdata_stacked.test$uplift_score)
