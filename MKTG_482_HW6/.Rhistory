ep.offer = case_when(
ep.team == ep.max ~ "team",
ep.backcountry == ep.max ~ "backcountry",
ep.endurance == ep.max ~ "endurance",
ep.water == ep.max ~ "water",
ep.racquet == ep.max ~ "racquet",
ep.strength == ep.max ~ "strength",
ep.control == ep.max ~ "control",
)
)
pent.nptb.test %>% tabyl(ep.offer)
mean(pent.nptb.test$ep.max)
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean))
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean)) %>%
rowMeans()
inc_profit <- 5000000 * mean(pent.nptb.test$ep.max) - 5000000 * mean(pent.nptb.test$ep.racquet)
inc_percentage <- mean(pent.nptb.test$ep.max) / mean(pent.nptb.test$ep.racquet) - 1
paste("Incremental Profit of ep.max v ep.racquet in Euros: ", dollar(inc_profit),
"Incremental % of ep.ax v ep.racquet: ", percent(inc_percentage, 0.1))
pent.nptb.test %>% head(10)
pent.nptb.test %>% head(10) %>% select(custid, ep.max, ep.offer)
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(skimr)
library(dplyr)
library(scales)
# use load("filename.Rdata") for .Rdata files
load("/Users/dain/Programs/R_Projects/MKTG_482_HW6/PentathlonTargeting.RData")
pent.nptb <- pent %>%
mutate(buyer=factor(buyer), female=factor(female), age=factor(age), message=factor(message))
pent.nptb.train <- pent.nptb %>% filter(training==1)
pent.nptb.test <- pent.nptb %>% filter(training==0)
lr.formula <- formula(buyer ~ age + female + income + education + children + freq_endurance + freq_strength + freq_water + freq_team + freq_backcountry + freq_racquet)
lr.team <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="team"))
lr.backcountry <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="backcountry"))
lr.endurance <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="endurance"))
lr.water <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="water"))
lr.racquet <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="racquet"))
lr.strength <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="strength"))
lr.control <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="control"))
pent.nptb.test <- pent.nptb.test %>%
mutate(
pr.team = predict(lr.team, newdata=pent.nptb.test, type="response"),
pr.backcountry = predict(lr.backcountry, newdata=pent.nptb.test, type="response"),
pr.endurance = predict(lr.endurance, newdata=pent.nptb.test, type="response"),
pr.water = predict(lr.water, newdata=pent.nptb.test, type="response"),
pr.racquet = predict(lr.racquet, newdata=pent.nptb.test, type="response"),
pr.strength = predict(lr.strength, newdata=pent.nptb.test, type="response"),
pr.control = predict(lr.control, newdata=pent.nptb.test, type="response"),
)
pent.nptb.test <- pent.nptb.test %>%
mutate(
pr.max = pmax(pr.team, pr.backcountry, pr.endurance, pr.water, pr.racquet, pr.strength, pr.control),
pr.offer = case_when(
pr.team == pr.max ~ "team",
pr.backcountry == pr.max ~ "backcountry",
pr.endurance == pr.max ~ "endurance",
pr.water == pr.max ~ "water",
pr.racquet == pr.max ~ "racquet",
pr.strength == pr.max ~ "strength",
pr.control == pr.max ~ "control",
)
)
pent.nptb.test %>% tabyl(pr.offer)
# pr.team, pr.backcountry, pr.endurance, pr.water, pr.racquet, pr.strength, pr.control
pent.nptb.test %>% filter(buyer==1, freq_team>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_backcountry>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_endurance>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_water>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_racquet>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_strength>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1) %>% summarise(mean(total_os))
# I think this is the best approach
avg_ord_size <- pent.nptb.test %>%
filter(total_os > 0) %>%
mutate(buy_bucket=case_when(
freq_team > 0 ~ "team",
freq_backcountry > 0 ~ "backcountry",
freq_endurance > 0 ~ "endurance",
freq_water > 0 ~ "water",
freq_racquet > 0 ~ "racquet",
freq_strength > 0 ~ "strength",
TRUE ~ "control",
)) %>%
group_by(buy_bucket) %>%
summarize(customers=n(), est_tot_os=mean(total_os))
# OPTION B: this isn't terrible, but is based on prior bucketing - I think we want more raw data
# pent.nptb.test %>%
#   filter(buyer==1) %>%
#   group_by(mail.offer) %>%
#   summarize(purchases=sum(buyer==1), customers=n(), rate=mean(buyer==1), est_tot_os=mean(total_os))
# OPTION C: I don't think this works because linear regression will factor in lower probability to purchase, and therefore we'll take a double whammy
# lr.ord_size_formula <- formula(total_os ~ age + female + income + education + children + freq_endurance + freq_strength + freq_water + freq_team + # freq_backcountry + freq_racquet)
# linReg.ord_size <- lm(lr.ord_size_formula, data=pent.nptb.train %>% filter(buyer==1))
# pent.nptb.test %>%
#   mutate(pred_ord_size=predict(linReg.ord_size, newdata=pent.nptb.test, type="response"))
margin <- 0.4
pent.nptb.test <- pent.nptb.test %>%
mutate(
ep.team=pr.team*(avg_ord_size %>% filter(buy_bucket=='team'))$est_tot_os * margin,
ep.backcountry=pr.backcountry*(avg_ord_size %>% filter(buy_bucket=='backcountry'))$est_tot_os * margin,
ep.endurance=pr.endurance*(avg_ord_size %>% filter(buy_bucket=='endurance'))$est_tot_os * margin,
ep.water=pr.water*(avg_ord_size %>% filter(buy_bucket=='water'))$est_tot_os * margin,
ep.racquet=pr.racquet*(avg_ord_size %>% filter(buy_bucket=='racquet'))$est_tot_os * margin,
ep.strength=pr.strength*(avg_ord_size %>% filter(buy_bucket=='strength'))$est_tot_os * margin,
ep.control=pr.strength*(avg_ord_size %>% filter(buy_bucket=='control'))$est_tot_os * margin,
) %>%
mutate(
ep.max = pmax(ep.team, ep.backcountry, ep.endurance, ep.water, ep.racquet, ep.strength, ep.control),
ep.offer = case_when(
ep.team == ep.max ~ "team",
ep.backcountry == ep.max ~ "backcountry",
ep.endurance == ep.max ~ "endurance",
ep.water == ep.max ~ "water",
ep.racquet == ep.max ~ "racquet",
ep.strength == ep.max ~ "strength",
ep.control == ep.max ~ "control",
)
)
pent.nptb.test %>% head(10) %>% select(custid, ep.max, ep.offer)
pent.nptb.test %>% tabyl(ep.offer)
mean(pent.nptb.test$ep.max)
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean))
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean)) %>%
rowMeans()
inc_profit <- 5000000 * mean(pent.nptb.test$ep.max) - 5000000 * mean(pent.nptb.test$ep.racquet)
inc_percentage <- mean(pent.nptb.test$ep.max) / mean(pent.nptb.test$ep.racquet) - 1
paste("Incremental Profit of ep.max v ep.racquet in Euros: ", dollar(inc_profit),
"Incremental % of ep.ax v ep.racquet: ", percent(inc_percentage, 0.1))
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(skimr)
library(dplyr)
library(scales)
# use load("filename.Rdata") for .Rdata files
load("/Users/dain/Programs/R_Projects/MKTG_482_HW6/PentathlonTargeting.RData")
pent.nptb <- pent %>%
mutate(buyer=factor(buyer), female=factor(female), age=factor(age), message=factor(message))
pent.nptb.train <- pent.nptb %>% filter(training==1)
pent.nptb.test <- pent.nptb %>% filter(training==0)
lr.formula <- formula(buyer ~ age + female + income + education + children + freq_endurance + freq_strength + freq_water + freq_team + freq_backcountry + freq_racquet)
lr.team <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="team"))
lr.backcountry <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="backcountry"))
lr.endurance <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="endurance"))
lr.water <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="water"))
lr.racquet <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="racquet"))
lr.strength <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="strength"))
lr.control <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="control"))
pent.nptb.test <- pent.nptb.test %>%
mutate(
pr.team = predict(lr.team, newdata=pent.nptb.test, type="response"),
pr.backcountry = predict(lr.backcountry, newdata=pent.nptb.test, type="response"),
pr.endurance = predict(lr.endurance, newdata=pent.nptb.test, type="response"),
pr.water = predict(lr.water, newdata=pent.nptb.test, type="response"),
pr.racquet = predict(lr.racquet, newdata=pent.nptb.test, type="response"),
pr.strength = predict(lr.strength, newdata=pent.nptb.test, type="response"),
pr.control = predict(lr.control, newdata=pent.nptb.test, type="response"),
)
pent.nptb.test <- pent.nptb.test %>%
mutate(
pr.max = pmax(pr.team, pr.backcountry, pr.endurance, pr.water, pr.racquet, pr.strength, pr.control),
pr.offer = case_when(
pr.team == pr.max ~ "team",
pr.backcountry == pr.max ~ "backcountry",
pr.endurance == pr.max ~ "endurance",
pr.water == pr.max ~ "water",
pr.racquet == pr.max ~ "racquet",
pr.strength == pr.max ~ "strength",
pr.control == pr.max ~ "control",
)
)
pent.nptb.test %>% head(10) %>% select(custid, pr.max, pr.offer)
pent.nptb.test %>% tabyl(pr.offer)
# pr.team, pr.backcountry, pr.endurance, pr.water, pr.racquet, pr.strength, pr.control
pent.nptb.test %>% filter(buyer==1, freq_team>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_backcountry>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_endurance>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_water>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_racquet>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1, freq_strength>0) %>% summarise(mean(total_os))
pent.nptb.test %>% filter(buyer==1) %>% summarise(mean(total_os))
# I think this is the best approach
avg_ord_size <- pent.nptb.test %>%
filter(total_os > 0) %>%
mutate(buy_bucket=case_when(
freq_team > 0 ~ "team",
freq_backcountry > 0 ~ "backcountry",
freq_endurance > 0 ~ "endurance",
freq_water > 0 ~ "water",
freq_racquet > 0 ~ "racquet",
freq_strength > 0 ~ "strength",
TRUE ~ "control",
)) %>%
group_by(buy_bucket) %>%
summarize(customers=n(), est_tot_os=mean(total_os))
# OPTION B: this isn't terrible, but is based on prior bucketing - I think we want more raw data
# pent.nptb.test %>%
#   filter(buyer==1) %>%
#   group_by(mail.offer) %>%
#   summarize(purchases=sum(buyer==1), customers=n(), rate=mean(buyer==1), est_tot_os=mean(total_os))
# OPTION C: I don't think this works because linear regression will factor in lower probability to purchase, and therefore we'll take a double whammy
# lr.ord_size_formula <- formula(total_os ~ age + female + income + education + children + freq_endurance + freq_strength + freq_water + freq_team + # freq_backcountry + freq_racquet)
# linReg.ord_size <- lm(lr.ord_size_formula, data=pent.nptb.train %>% filter(buyer==1))
# pent.nptb.test %>%
#   mutate(pred_ord_size=predict(linReg.ord_size, newdata=pent.nptb.test, type="response"))
margin <- 0.4
pent.nptb.test <- pent.nptb.test %>%
mutate(
ep.team=pr.team*(avg_ord_size %>% filter(buy_bucket=='team'))$est_tot_os * margin,
ep.backcountry=pr.backcountry*(avg_ord_size %>% filter(buy_bucket=='backcountry'))$est_tot_os * margin,
ep.endurance=pr.endurance*(avg_ord_size %>% filter(buy_bucket=='endurance'))$est_tot_os * margin,
ep.water=pr.water*(avg_ord_size %>% filter(buy_bucket=='water'))$est_tot_os * margin,
ep.racquet=pr.racquet*(avg_ord_size %>% filter(buy_bucket=='racquet'))$est_tot_os * margin,
ep.strength=pr.strength*(avg_ord_size %>% filter(buy_bucket=='strength'))$est_tot_os * margin,
ep.control=pr.strength*(avg_ord_size %>% filter(buy_bucket=='control'))$est_tot_os * margin,
) %>%
mutate(
ep.max = pmax(ep.team, ep.backcountry, ep.endurance, ep.water, ep.racquet, ep.strength, ep.control),
ep.offer = case_when(
ep.team == ep.max ~ "team",
ep.backcountry == ep.max ~ "backcountry",
ep.endurance == ep.max ~ "endurance",
ep.water == ep.max ~ "water",
ep.racquet == ep.max ~ "racquet",
ep.strength == ep.max ~ "strength",
ep.control == ep.max ~ "control",
)
)
pent.nptb.test %>% head(10) %>% select(custid, ep.max, ep.offer)
pent.nptb.test %>% tabyl(ep.offer)
mean(pent.nptb.test$ep.max)
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean))
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean)) %>%
rowMeans()
inc_profit <- 5000000 * mean(pent.nptb.test$ep.max) - 5000000 * mean(pent.nptb.test$ep.racquet)
inc_percentage <- mean(pent.nptb.test$ep.max) / mean(pent.nptb.test$ep.racquet) - 1
paste("Incremental Profit of ep.max v ep.racquet in Euros: ", dollar(inc_profit),
"Incremental % of ep.ax v ep.racquet: ", percent(inc_percentage, 0.1))
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(skimr)
library(dplyr)
library(scales)
# use load("filename.Rdata") for .Rdata files
load("/Users/dain/Programs/R_Projects/MKTG_482_HW6/PentathlonTargeting.RData")
pent.nptb <- pent %>%
mutate(buyer=factor(buyer), female=factor(female), age=factor(age), message=factor(message))
pent.nptb.train <- pent.nptb %>% filter(training==1)
pent.nptb.test <- pent.nptb %>% filter(training==0)
lr.formula <- formula(buyer ~ age + female + income + education + children + freq_endurance + freq_strength + freq_water + freq_team + freq_backcountry + freq_racquet)
lr.team <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="team"))
lr.backcountry <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="backcountry"))
lr.endurance <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="endurance"))
lr.water <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="water"))
lr.racquet <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="racquet"))
lr.strength <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="strength"))
lr.control <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="control"))
pent.nptb.test <- pent.nptb.test %>%
mutate(
pr.team = predict(lr.team, newdata=pent.nptb.test, type="response"),
pr.backcountry = predict(lr.backcountry, newdata=pent.nptb.test, type="response"),
pr.endurance = predict(lr.endurance, newdata=pent.nptb.test, type="response"),
pr.water = predict(lr.water, newdata=pent.nptb.test, type="response"),
pr.racquet = predict(lr.racquet, newdata=pent.nptb.test, type="response"),
pr.strength = predict(lr.strength, newdata=pent.nptb.test, type="response"),
pr.control = predict(lr.control, newdata=pent.nptb.test, type="response"),
)
pent.nptb.test <- pent.nptb.test %>%
mutate(
pr.max = pmax(pr.team, pr.backcountry, pr.endurance, pr.water, pr.racquet, pr.strength, pr.control),
pr.offer = case_when(
pr.team == pr.max ~ "team",
pr.backcountry == pr.max ~ "backcountry",
pr.endurance == pr.max ~ "endurance",
pr.water == pr.max ~ "water",
pr.racquet == pr.max ~ "racquet",
pr.strength == pr.max ~ "strength",
pr.control == pr.max ~ "control",
)
)
pent.nptb.test %>% head(5) %>% select(custid, pr.max, pr.offer)
pent.nptb.test %>% tabyl(pr.offer)
# OPTION A: This is the long-form of what I do below and may be more accurate, but IDK
# pr.team, pr.backcountry, pr.endurance, pr.water, pr.racquet, pr.strength, pr.control
# pent.nptb.test %>% filter(buyer==1, freq_team>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_backcountry>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_endurance>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_water>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_racquet>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_strength>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1) %>% summarise(mean(total_os))
# OPTION B: I think this is the best approach
avg_ord_size <- pent.nptb.test %>%
filter(total_os > 0) %>%
mutate(buy_bucket=case_when(
freq_team > 0 ~ "team",
freq_backcountry > 0 ~ "backcountry",
freq_endurance > 0 ~ "endurance",
freq_water > 0 ~ "water",
freq_racquet > 0 ~ "racquet",
freq_strength > 0 ~ "strength",
TRUE ~ "control",
)) %>%
group_by(buy_bucket) %>%
summarize(customers=n(), est_tot_os=mean(total_os))
# OPTION C: this isn't terrible, but is based on prior bucketing - I think we want more raw data
# pent.nptb.test %>%
#   filter(buyer==1) %>%
#   group_by(mail.offer) %>%
#   summarize(purchases=sum(buyer==1), customers=n(), rate=mean(buyer==1), est_tot_os=mean(total_os))
# OPTION D: I don't think this works because linear regression will factor in lower probability to purchase, and therefore we'll take a double whammy
# lr.ord_size_formula <- formula(total_os ~ age + female + income + education + children + freq_endurance + freq_strength + freq_water + freq_team + # freq_backcountry + freq_racquet)
# linReg.ord_size <- lm(lr.ord_size_formula, data=pent.nptb.train %>% filter(buyer==1))
# pent.nptb.test %>%
#   mutate(pred_ord_size=predict(linReg.ord_size, newdata=pent.nptb.test, type="response"))
margin <- 0.4
pent.nptb.test <- pent.nptb.test %>%
mutate(
ep.team=pr.team*(avg_ord_size %>% filter(buy_bucket=='team'))$est_tot_os * margin,
ep.backcountry=pr.backcountry*(avg_ord_size %>% filter(buy_bucket=='backcountry'))$est_tot_os * margin,
ep.endurance=pr.endurance*(avg_ord_size %>% filter(buy_bucket=='endurance'))$est_tot_os * margin,
ep.water=pr.water*(avg_ord_size %>% filter(buy_bucket=='water'))$est_tot_os * margin,
ep.racquet=pr.racquet*(avg_ord_size %>% filter(buy_bucket=='racquet'))$est_tot_os * margin,
ep.strength=pr.strength*(avg_ord_size %>% filter(buy_bucket=='strength'))$est_tot_os * margin,
ep.control=pr.strength*(avg_ord_size %>% filter(buy_bucket=='control'))$est_tot_os * margin,
) %>%
mutate(
ep.max = pmax(ep.team, ep.backcountry, ep.endurance, ep.water, ep.racquet, ep.strength, ep.control),
ep.offer = case_when(
ep.team == ep.max ~ "team",
ep.backcountry == ep.max ~ "backcountry",
ep.endurance == ep.max ~ "endurance",
ep.water == ep.max ~ "water",
ep.racquet == ep.max ~ "racquet",
ep.strength == ep.max ~ "strength",
ep.control == ep.max ~ "control",
)
)
pent.nptb.test %>% head(5) %>% select(custid, ep.max, ep.offer)
pent.nptb.test %>% tabyl(ep.offer)
mean(pent.nptb.test$ep.max)
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean))
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean)) %>%
rowMeans()
inc_profit <- 5000000 * mean(pent.nptb.test$ep.max) - 5000000 * mean(pent.nptb.test$ep.racquet)
inc_percentage <- mean(pent.nptb.test$ep.max) / mean(pent.nptb.test$ep.racquet) - 1
paste("Incremental Profit of ep.max v ep.racquet in Euros: ", dollar(inc_profit),
"Incremental % of ep.ax v ep.racquet: ", percent(inc_percentage, 0.1))
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(skimr)
library(dplyr)
library(scales)
# use load("filename.Rdata") for .Rdata files
load("/Users/dain/Programs/R_Projects/MKTG_482_HW6/PentathlonTargeting.RData")
pent.nptb <- pent %>%
mutate(buyer=factor(buyer), female=factor(female), age=factor(age), message=factor(message))
pent.nptb.train <- pent.nptb %>% filter(training==1)
pent.nptb.test <- pent.nptb %>% filter(training==0)
lr.formula <- formula(buyer ~ age + female + income + education + children + freq_endurance + freq_strength + freq_water + freq_team + freq_backcountry + freq_racquet)
lr.team <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="team"))
lr.backcountry <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="backcountry"))
lr.endurance <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="endurance"))
lr.water <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="water"))
lr.racquet <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="racquet"))
lr.strength <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="strength"))
lr.control <- glm(lr.formula, family=binomial, data=pent.nptb.train %>% filter(message=="control"))
pent.nptb.test <- pent.nptb.test %>%
mutate(
pr.team = predict(lr.team, newdata=pent.nptb.test, type="response"),
pr.backcountry = predict(lr.backcountry, newdata=pent.nptb.test, type="response"),
pr.endurance = predict(lr.endurance, newdata=pent.nptb.test, type="response"),
pr.water = predict(lr.water, newdata=pent.nptb.test, type="response"),
pr.racquet = predict(lr.racquet, newdata=pent.nptb.test, type="response"),
pr.strength = predict(lr.strength, newdata=pent.nptb.test, type="response"),
pr.control = predict(lr.control, newdata=pent.nptb.test, type="response"),
)
pent.nptb.test <- pent.nptb.test %>%
mutate(
pr.max = pmax(pr.team, pr.backcountry, pr.endurance, pr.water, pr.racquet, pr.strength, pr.control),
pr.offer = case_when(
pr.team == pr.max ~ "team",
pr.backcountry == pr.max ~ "backcountry",
pr.endurance == pr.max ~ "endurance",
pr.water == pr.max ~ "water",
pr.racquet == pr.max ~ "racquet",
pr.strength == pr.max ~ "strength",
pr.control == pr.max ~ "control",
)
)
pent.nptb.test %>% head(5) %>% select(custid, pr.max, pr.offer)
pent.nptb.test %>% tabyl(pr.offer)
# OPTION A: This is the long-form of what I do below and may be more accurate, but IDK
# pr.team, pr.backcountry, pr.endurance, pr.water, pr.racquet, pr.strength, pr.control
# pent.nptb.test %>% filter(buyer==1, freq_team>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_backcountry>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_endurance>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_water>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_racquet>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1, freq_strength>0) %>% summarise(mean(total_os))
# pent.nptb.test %>% filter(buyer==1) %>% summarise(mean(total_os))
# OPTION B: I think this is the best approach
avg_ord_size <- pent.nptb.test %>%
filter(total_os > 0) %>%
mutate(buy_bucket=case_when(
freq_team > 0 ~ "team",
freq_backcountry > 0 ~ "backcountry",
freq_endurance > 0 ~ "endurance",
freq_water > 0 ~ "water",
freq_racquet > 0 ~ "racquet",
freq_strength > 0 ~ "strength",
TRUE ~ "control",
)) %>%
group_by(buy_bucket) %>%
summarize(customers=n(), est_tot_os=mean(total_os))
# OPTION C: this isn't terrible, but is based on prior bucketing - I think we want more raw data
# pent.nptb.test %>%
#   filter(buyer==1) %>%
#   group_by(mail.offer) %>%
#   summarize(purchases=sum(buyer==1), customers=n(), rate=mean(buyer==1), est_tot_os=mean(total_os))
# OPTION D: I don't think this works because linear regression will factor in lower probability to purchase, and therefore we'll take a double whammy
# lr.ord_size_formula <- formula(total_os ~ age + female + income + education + children + freq_endurance + freq_strength + freq_water + freq_team + # freq_backcountry + freq_racquet)
# linReg.ord_size <- lm(lr.ord_size_formula, data=pent.nptb.train %>% filter(buyer==1))
# pent.nptb.test %>%
#   mutate(pred_ord_size=predict(linReg.ord_size, newdata=pent.nptb.test, type="response"))
margin <- 0.4
pent.nptb.test <- pent.nptb.test %>%
mutate(
ep.team=pr.team*(avg_ord_size %>% filter(buy_bucket=='team'))$est_tot_os * margin,
ep.backcountry=pr.backcountry*(avg_ord_size %>% filter(buy_bucket=='backcountry'))$est_tot_os * margin,
ep.endurance=pr.endurance*(avg_ord_size %>% filter(buy_bucket=='endurance'))$est_tot_os * margin,
ep.water=pr.water*(avg_ord_size %>% filter(buy_bucket=='water'))$est_tot_os * margin,
ep.racquet=pr.racquet*(avg_ord_size %>% filter(buy_bucket=='racquet'))$est_tot_os * margin,
ep.strength=pr.strength*(avg_ord_size %>% filter(buy_bucket=='strength'))$est_tot_os * margin,
ep.control=pr.strength*(avg_ord_size %>% filter(buy_bucket=='control'))$est_tot_os * margin,
) %>%
mutate(
ep.max = pmax(ep.team, ep.backcountry, ep.endurance, ep.water, ep.racquet, ep.strength, ep.control),
ep.offer = case_when(
ep.team == ep.max ~ "team",
ep.backcountry == ep.max ~ "backcountry",
ep.endurance == ep.max ~ "endurance",
ep.water == ep.max ~ "water",
ep.racquet == ep.max ~ "racquet",
ep.strength == ep.max ~ "strength",
ep.control == ep.max ~ "control",
)
)
pent.nptb.test %>% head(5) %>% select(custid, ep.max, ep.offer)
pent.nptb.test %>% tabyl(ep.offer)
mean(pent.nptb.test$ep.max)
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean))
pent.nptb.test %>%
summarise_at(vars(ep.endurance, ep.strength, ep.water, ep.team, ep.backcountry, ep.racquet, ep.control), list(mean)) %>%
rowMeans()
inc_profit <- 5000000 * mean(pent.nptb.test$ep.max) - 5000000 * mean(pent.nptb.test$ep.racquet)
inc_percentage <- mean(pent.nptb.test$ep.max) / mean(pent.nptb.test$ep.racquet) - 1
paste("Incremental Profit of ep.max v ep.racquet in Euros: ", dollar(inc_profit),
"Incremental % of ep.ax v ep.racquet: ", percent(inc_percentage, 0.1))
